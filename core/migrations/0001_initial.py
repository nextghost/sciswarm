# -*- coding: utf-8 -*-
# Generated by Django 1.10.7 on 2018-12-13 17:04
from __future__ import unicode_literals

import core.models.auth
import core.models.fields
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0008_alter_user_username_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=30, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('language', models.CharField(max_length=8, verbose_name='system language')),
                ('verification_key', models.CharField(editable=False, max_length=256, null=True, verbose_name='e-mail verification key')),
                ('delete_deadline', models.DateTimeField(db_index=True, editable=False, null=True, verbose_name='account deletion date')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
            ],
            options={
                'ordering': ('last_name', 'first_name'),
            },
            managers=[
                ('objects', core.models.auth.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='BruteBlock',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('log_date', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('username', models.CharField(db_index=True, max_length=150)),
                ('ip_address', models.GenericIPAddressField(db_index=True)),
            ],
        ),
        migrations.CreateModel(
            name='BruteLog',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('log_date', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('username', models.CharField(max_length=150, null=True)),
                ('ip_address', models.GenericIPAddressField()),
            ],
        ),
        migrations.CreateModel(
            name='Paper',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(db_index=True, max_length=512, verbose_name='title')),
                ('abstract', models.TextField(max_length=4000, verbose_name='abstract')),
                ('contents_theory', models.BooleanField(db_index=True, help_text='Check this box if the paper expands prior theory.', verbose_name='theory development')),
                ('contents_survey', models.BooleanField(db_index=True, help_text='Check this box if the paper contains or analyzes survey data.', verbose_name='survey data')),
                ('contents_observation', models.BooleanField(db_index=True, help_text='Check this box if the paper contains or analyzes data from observation of natural phenomena.', verbose_name='observational data')),
                ('contents_experiment', models.BooleanField(db_index=True, help_text='Check this box if the paper contains or analyzes data from controlled experiments.', verbose_name='experimental data')),
                ('contents_metaanalysis', models.BooleanField(db_index=True, help_text='Check this box if the paper contains extensive metaanalysis or literature review (aside from the usual summary in introduction).', verbose_name='metaanalysis')),
                ('year_published', models.IntegerField(blank=True, db_index=True, help_text='Year when this paper was officially published, e.g. in a journal. Leave blank if publication date is pending.', null=True, verbose_name='year published')),
                ('cite_as', models.CharField(blank=True, help_text='Preferred citation text.', max_length=512, verbose_name='cite as')),
                ('incomplete_metadata', models.BooleanField(db_index=True, default=True, help_text='Check this box if some information about this paper is missing (e.g. omitted citations because the cited papers have no usable identifier).', verbose_name='incomplete metadata')),
                ('date_posted', models.DateTimeField(auto_now_add=True, db_index=True, verbose_name='date posted')),
                ('last_changed', models.DateTimeField(auto_now=True, db_index=True, verbose_name='last changed')),
                ('public', models.BooleanField(default=True, verbose_name='public')),
            ],
            options={
                'ordering': ('name',),
            },
        ),
        migrations.CreateModel(
            name='PaperAlias',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('scheme', core.models.fields.OpenChoiceField(blank=True, choices=[('doi', 'DOI'), ('isbn', 'ISBN'), ('arxiv', 'arXiv'), ('swarm', 'Sciswarm'), ('http', 'Web URL'), ('', 'Other')], max_length=16, verbose_name='scheme')),
                ('identifier', models.CharField(max_length=256, verbose_name='identifier')),
                ('target', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.Paper', verbose_name='paper')),
            ],
            options={
                'ordering': ('scheme', 'identifier'),
            },
        ),
        migrations.CreateModel(
            name='PaperAuthorName',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('author_name', models.CharField(db_index=True, help_text='Additional authors with no unique identifier', max_length=128, verbose_name='author')),
                ('paper', models.ForeignKey(editable=False, on_delete=django.db.models.deletion.CASCADE, to='core.Paper', verbose_name='paper')),
            ],
            options={
                'ordering': ('paper', 'author_name'),
            },
        ),
        migrations.CreateModel(
            name='PaperAuthorReference',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('confirmed', models.NullBooleanField(db_index=True, verbose_name='confirmed')),
            ],
            options={
                'ordering': ('paper', 'author_alias'),
            },
        ),
        migrations.CreateModel(
            name='PaperKeyword',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('keyword', models.CharField(db_index=True, max_length=32, verbose_name='keyword')),
                ('paper', models.ForeignKey(editable=False, on_delete=django.db.models.deletion.CASCADE, to='core.Paper', verbose_name='paper')),
            ],
            options={
                'ordering': ('keyword',),
            },
        ),
        migrations.CreateModel(
            name='PaperSupplementalLink',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=128, verbose_name='title')),
                ('url', core.models.fields.URLField(max_length=512, verbose_name='URL')),
                ('paper', models.ForeignKey(editable=False, on_delete=django.db.models.deletion.CASCADE, to='core.Paper', verbose_name='paper')),
            ],
            options={
                'ordering': ('paper', 'name'),
            },
        ),
        migrations.CreateModel(
            name='Person',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('username', models.CharField(editable=False, max_length=150, unique=True, verbose_name='username')),
                ('title_before', models.CharField(blank=True, max_length=64, verbose_name='titles before name')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=30, verbose_name='last name')),
                ('title_after', models.CharField(blank=True, max_length=64, verbose_name='titles after name')),
                ('bio', models.TextField(blank=True, max_length=1024, verbose_name='about you')),
            ],
            options={
                'ordering': ('last_name', 'first_name'),
            },
        ),
        migrations.CreateModel(
            name='PersonAlias',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('scheme', core.models.fields.OpenChoiceField(blank=True, choices=[('mailto', 'E-mail'), ('orcid', 'ORCID iD'), ('xmpp', 'XMPP'), ('twitter', 'Twitter'), ('swarm', 'Sciswarm'), ('http', 'Personal website'), ('', 'Other')], max_length=16, verbose_name='scheme')),
                ('identifier', models.CharField(max_length=150, verbose_name='identifier')),
                ('target', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.Person', verbose_name='user')),
            ],
            options={
                'ordering': ('scheme', 'identifier'),
            },
        ),
        migrations.AddField(
            model_name='paperauthorreference',
            name='author_alias',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.PersonAlias', verbose_name='author'),
        ),
        migrations.AddField(
            model_name='paperauthorreference',
            name='paper',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.Paper', verbose_name='paper'),
        ),
        migrations.AddField(
            model_name='paper',
            name='authors',
            field=models.ManyToManyField(through='core.PaperAuthorReference', to='core.PersonAlias'),
        ),
        migrations.AddField(
            model_name='paper',
            name='bibliography',
            field=models.ManyToManyField(to='core.PaperAlias'),
        ),
        migrations.AddField(
            model_name='paper',
            name='changed_by',
            field=models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='core.Person', verbose_name='changed by'),
        ),
        migrations.AddField(
            model_name='paper',
            name='posted_by',
            field=models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='posted_paper_set', to='core.Person', verbose_name='posted by'),
        ),
        migrations.AddField(
            model_name='user',
            name='person',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='+', to='core.Person', verbose_name='person'),
        ),
        migrations.AddField(
            model_name='user',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions'),
        ),
        migrations.AlterUniqueTogether(
            name='personalias',
            unique_together=set([('scheme', 'identifier')]),
        ),
        migrations.AlterUniqueTogether(
            name='papersupplementallink',
            unique_together=set([('url', 'paper'), ('name', 'paper')]),
        ),
        migrations.AlterUniqueTogether(
            name='paperalias',
            unique_together=set([('scheme', 'identifier')]),
        ),
    ]
